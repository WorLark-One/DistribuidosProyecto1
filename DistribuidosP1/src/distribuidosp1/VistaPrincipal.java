/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package distribuidosp1;

import ModuloDeElementosEstructurantes.ElementoEstructuranteL;
import ModuloDeElementosEstructurantes.ElementoEstructuranteX;
import ModuloDeElementosEstructurantes.GestorIterativo;
import ModuloDeElementosEstructurantes.GestorParalelo;
import java.awt.Image;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author felip
 */
public class VistaPrincipal extends javax.swing.JFrame {
    private int[][] matrizCompleta;
    private int[][] matrizCompletaAux;
    private  GestorIterativo gi;
    private  GestorParalelo gp;
    private boolean flag = false;
    
    private String minimo;
    private String dimensiones[] = new String[2];
    /**
     * Creates new form VistaPrincipal
     */
    public VistaPrincipal() {
        initComponents();
        gi = new GestorIterativo();
        gp = new GestorParalelo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Elegir imagen");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Erosion");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Dilatacion");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Escoje un metodo de resolucion", "Secuencial", "Paralelo" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Cantidad de hilos: ");

        jTextField1.setEditable(false);

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Escoje un tipo estructural", "L invertida", "L", "I", "Guion", "X" }));

        jLabel2.setText("Opciones");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jComboBox2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
//        boolean flag1 = false;
//        try{
//            File abre;
//            JFileChooser file = new JFileChooser();
//            file.showOpenDialog(this);
//            abre = file.getSelectedFile();
//            if(abre!=null){     
//                FileReader archivos=new FileReader(abre);
//                String tipo = file.getTypeDescription(abre);
//                if(!(("Archivo PGM").equals(tipo))){
//                    JOptionPane.showMessageDialog(null, "El tipo del archivo no era una imagen", "Mensaje de advertencia", JOptionPane.WARNING_MESSAGE);
//                    return;
//                }
//                ImageIcon i = new ImageIcon(abre.getAbsolutePath()); 
//                Image img = i.getImage();
//                img = img.getScaledInstance(400, 800, java.awt.Image.SCALE_SMOOTH);
//                i = new ImageIcon(img);
//                JLabel imagen = new JLabel();
//                imagen.setIcon(i);
//                imagen.setBounds(0, 0,400,800);
//                this.jPanel1.add(imagen);
//                this.pack();
//                this.repaint();
//                flag1 = true;
//            }    
//        }
//        catch(IOException ex){
//            JOptionPane.showMessageDialog(null,ex+"" + "\nNo se ha encontrado el archivo", "ADVERTENCIA!!!",JOptionPane.WARNING_MESSAGE);
//            return;
//        }
//        if (flag1) {
//            JOptionPane.showMessageDialog(null, "La imagen fue guardada con ??xito");
//        }
//        else{
//            JOptionPane.showMessageDialog(null, "El evento fue cancelado");
//        }


        //DATOS DE LA IMAGEN
 
        //P2: Los valores de los p??xeles vienen en formato ASCII (es decir como cifras num??ricas enteras entre 0 y 255).
        //P5: Los valores de los p??xeles vienen en formato Binario (es decir la informaci??n de cada p??xel viene expresada en un byte).
        String cadenaMagica;

        //Indica las dimensiones de la imagen. Ancho y alto.
        

        //Indica el valor m??ximo del nivel de gris.
        String nivelGris;

        //Representaci??n de toda la imagen.
        String imagen = null;
        ArrayList<String[]> s = new ArrayList<>();
        
        try {
            File abre;
            JFileChooser file = new JFileChooser();
            file.showOpenDialog(this);
            abre = file.getSelectedFile();
            BufferedReader archivo = new BufferedReader(new FileReader(abre.getAbsolutePath()));

            cadenaMagica = archivo.readLine();
            System.out.println ("Cadena Magica: "+cadenaMagica);

            String a = archivo.readLine();
            System.out.println(a);
            dimensiones = archivo.readLine().split(" ");
            System.out.println ("Ancho: "+dimensiones[0]+" Alto: "+dimensiones[1]);

            minimo = archivo.readLine();
            System.out.println("");
            imagen = " ";
            
//            String ruta = "pruebaGuardado.pgm";
//            File filite = new File(ruta);
////            // Si el archivo no existe es creado
////            
//            if (!filite .exists()) {
//                filite .createNewFile();
//            }
//            FileWriter fw = new FileWriter(filite );
//            BufferedWriter bw = new BufferedWriter(fw);
//                bw.write(cadenaMagica);
//                bw.newLine();
//                bw.write(a);
//                bw.newLine();
//                bw.write(dimensiones[0]+" "+dimensiones[1]);
//                bw.newLine();
//                bw.write(minimo);
//                bw.newLine();
//                
//                
                String str = archivo.readLine();
                
                while(str!=null){
                    //s.add(str.split(""));
                    imagen +=str;
//                    bw.write(str);
//                    bw.newLine();
                    str = archivo.readLine();
//                    
                }
//                bw.close();
               
////            }
            this.flag =true;
        }catch(Exception exc)
        {
         System.out.println ("Error leyendo archivo");
        }
        if (flag == true) {
            int alto = Integer.parseInt(dimensiones[1]);
            int ancho = Integer.parseInt(dimensiones[0]);
            this.matrizCompleta = new int[alto][ancho];
            this.matrizCompletaAux = new int[alto][ancho];
            int nivel = 0;
            for(int i=0 ; i<alto ; i++){
                for(int j=0 ; j<ancho ; j++){
                    char a ;
                    if (i==0) {
                        a = imagen.charAt(i*ancho+j);
                    }
                    else{
                        a = imagen.charAt(i*ancho+(j+1));
                    }


                    //System.out.println("Char: "+a);
                    nivel = (int) a;
                    //System.out.println("nivel: "+nivel);

                    //Esto lo hago por el error para que sea un valor comprendido entre 0-255
                    //No deber??a pasar esto.  
                    if(nivel>255){
                        nivel = 255;
                    }
                    this.matrizCompleta[i][j] = nivel;
                    this.matrizCompletaAux[i][j] = nivel;
                }
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Error leyendo el archivo","Advertencia ", JOptionPane.WARNING_MESSAGE);
            System.out.println("lista las matrices");
        }

        //crearArchivo(this.matrizCompleta);
        //this.imprimirMatriz(matrizCompleta);
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if (flag == false) {
            JOptionPane.showMessageDialog(null, "Debe cargar un archivo para realizar esta accion","Advertencia ", JOptionPane.WARNING_MESSAGE);
        }
        else{
        if (this.jComboBox1.getSelectedItem() != "Escoje un metodo de resolucion") {
            if (this.jComboBox1.getSelectedItem() == "Paralelo") {
                if (this.isNumero(this.jTextField1.getText())) {
                    if (this.jComboBox2.getSelectedItem() == "Escoje un tipo estructural") { 
                        JOptionPane.showMessageDialog(null, "Debe ingresar un tipo estructural","Advertencia ", JOptionPane.WARNING_MESSAGE);
                    }
                    else{
                        if (this.jComboBox2.getSelectedItem() == "L invertida" ) {
                            try {
                                crearArchivo(this.gp.ejecutarOpcion(Integer.parseInt(this.jTextField1.getText()), "InversaDeL", "Erosion", matrizCompleta));
                                JOptionPane.showMessageDialog(null, "La imagen fue guardada con exito");
                            } catch (InterruptedException ex) {
                                Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        if (this.jComboBox2.getSelectedItem() == "L") {
                            try {
                                crearArchivo(this.gp.ejecutarOpcion(Integer.parseInt(this.jTextField1.getText()), "L", "Erosion", matrizCompleta));
                                JOptionPane.showMessageDialog(null, "La imagen fue guardada con exito");
                            } catch (InterruptedException ex) {
                                Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        if (this.jComboBox2.getSelectedItem() == "I") {
                            try {
                                crearArchivo(this.gp.ejecutarOpcion(Integer.parseInt(this.jTextField1.getText()), "I", "Erosion", matrizCompleta));
                                JOptionPane.showMessageDialog(null, "La imagen fue guardada con exito");
                            } catch (InterruptedException ex) {
                                Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        if (this.jComboBox2.getSelectedItem() == "Guion") {
                            try {
                                crearArchivo(this.gp.ejecutarOpcion(Integer.parseInt(this.jTextField1.getText()), "Guion", "Erosion", matrizCompleta));
                                JOptionPane.showMessageDialog(null, "La imagen fue guardada con exito");
                            } catch (InterruptedException ex) {
                                Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        if (this.jComboBox2.getSelectedItem() == "X") {
                            try {
                                crearArchivo(this.gp.ejecutarOpcion(Integer.parseInt(this.jTextField1.getText()), "X", "Erosion", matrizCompleta));
                                JOptionPane.showMessageDialog(null, "La imagen fue guardada con exito");
                            } catch (InterruptedException ex) {
                                Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                }
                else{
                    JOptionPane.showMessageDialog(null, "Debe ingresar un numero de hilos valido","Advertencia ", JOptionPane.WARNING_MESSAGE);
                }
            }
            else{
                if (this.jComboBox1.getSelectedItem() == "Secuencial") {
                    if (this.jComboBox2.getSelectedItem() == "Escoje un tipo estructural") { 
                        JOptionPane.showMessageDialog(null, "Debe ingresar un tipo estructural","Advertencia ", JOptionPane.WARNING_MESSAGE);
                    }
                    else{
                        if (this.jComboBox2.getSelectedItem() == "L invertida" ) {
                            try {
                                crearArchivo(this.gi.ejecutarOpcion("InversaDeL","Erosion", matrizCompleta));
                                JOptionPane.showMessageDialog(null, "La imagen fue guardada con exito");
                            } catch (InterruptedException ex) {
                                Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        if (this.jComboBox2.getSelectedItem() == "L") {
                            try {
                                crearArchivo(this.gi.ejecutarOpcion("L","Erosion", matrizCompleta));
                                JOptionPane.showMessageDialog(null, "La imagen fue guardada con exito");
                            } catch (InterruptedException ex) {
                                Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        if (this.jComboBox2.getSelectedItem() == "I") {
                            try {
                                crearArchivo(this.gi.ejecutarOpcion("I","Erosion", matrizCompleta));
                                JOptionPane.showMessageDialog(null, "La imagen fue guardada con exito");
                            } catch (InterruptedException ex) {
                                Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        if (this.jComboBox2.getSelectedItem() == "Guion") {
                            try {
                                crearArchivo(this.gi.ejecutarOpcion("Guion","Erosion", matrizCompleta));
                                JOptionPane.showMessageDialog(null, "La imagen fue guardada con exito");
                            } catch (InterruptedException ex) {
                                Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        if (this.jComboBox2.getSelectedItem() == "X") {
                            try {
                                crearArchivo(this.gi.ejecutarOpcion("X","Erosion", matrizCompleta));
                                JOptionPane.showMessageDialog(null, "La imagen fue guardada con exito");
                            } catch (InterruptedException ex) {
                                Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                }
            }
            
        }
        else{
            JOptionPane.showMessageDialog(null, "Debe ingresar un metodo de resolucion para continuar","Advertencia ", JOptionPane.WARNING_MESSAGE);
        }
        }
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        if (flag ==false) {
            JOptionPane.showMessageDialog(null, "Debe cargar un archivo para realizar esta accion","Advertencia ", JOptionPane.WARNING_MESSAGE);
        }
        else{
        if (this.jComboBox1.getSelectedItem() != "Escoje un metodo de resolucion") {
            if (this.jComboBox1.getSelectedItem() == "Paralelo") {
                if (this.isNumero(this.jTextField1.getText())) {
                    if (this.jComboBox2.getSelectedItem() == "Escoje un tipo estructural") { 
                        JOptionPane.showMessageDialog(null, "Debe ingresar un tipo estructural","Advertencia ", JOptionPane.WARNING_MESSAGE);
                    }
                    else{
                        if (this.jComboBox2.getSelectedItem() == "L invertida" ) {
                            try {
                                crearArchivo(this.gp.ejecutarOpcion(Integer.parseInt(this.jTextField1.getText()), "InversaDeL", "Dilatacion", matrizCompleta));
                                JOptionPane.showMessageDialog(null, "La imagen fue guardada con exito");
                            } catch (InterruptedException ex) {
                                Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        if (this.jComboBox2.getSelectedItem() == "L") {
                            try {
                                crearArchivo(this.gp.ejecutarOpcion(Integer.parseInt(this.jTextField1.getText()), "L", "Dilatacion", matrizCompleta));
                                JOptionPane.showMessageDialog(null, "La imagen fue guardada con exito");
                            } catch (InterruptedException ex) {
                                Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        if (this.jComboBox2.getSelectedItem() == "I") {
                            try {
                                crearArchivo(this.gp.ejecutarOpcion(Integer.parseInt(this.jTextField1.getText()), "I", "Dilatacion", matrizCompleta));
                                JOptionPane.showMessageDialog(null, "La imagen fue guardada con exito");
                            } catch (InterruptedException ex) {
                                Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        if (this.jComboBox2.getSelectedItem() == "Guion") {
                            try {
                                crearArchivo(this.gp.ejecutarOpcion(Integer.parseInt(this.jTextField1.getText()), "Guion", "Dilatacion", matrizCompleta));
                                JOptionPane.showMessageDialog(null, "La imagen fue guardada con exito");
                            } catch (InterruptedException ex) {
                                Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        if (this.jComboBox2.getSelectedItem() == "X") {
                            try {
                                crearArchivo(this.gp.ejecutarOpcion(Integer.parseInt(this.jTextField1.getText()), "X", "Dilatacion", matrizCompleta));
                                JOptionPane.showMessageDialog(null, "La imagen fue guardada con exito");
                            } catch (InterruptedException ex) {
                                Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                }
                else{
                    JOptionPane.showMessageDialog(null, "Debe ingresar un numero de hilos valido","Advertencia ", JOptionPane.WARNING_MESSAGE);
                }
            }
            else{
                if (this.jComboBox1.getSelectedItem() == "Secuencial") {
                    if (this.jComboBox2.getSelectedItem() == "Escoje un tipo estructural") { 
                        JOptionPane.showMessageDialog(null, "Debe ingresar un tipo estructural","Advertencia ", JOptionPane.WARNING_MESSAGE);
                    }
                    else{
                        if (this.jComboBox2.getSelectedItem() == "L invertida" ) {
                            try {
                                crearArchivo(this.gi.ejecutarOpcion("InversaDeL","Dilatacion", matrizCompleta));
                                JOptionPane.showMessageDialog(null, "La imagen fue guardada con exito");
                            } catch (InterruptedException ex) {
                                Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        if (this.jComboBox2.getSelectedItem() == "L") {
                            try {
                                crearArchivo(this.gi.ejecutarOpcion("L","Dilatacion", matrizCompleta));
                                JOptionPane.showMessageDialog(null, "La imagen fue guardada con exito");
                            } catch (InterruptedException ex) {
                                Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        if (this.jComboBox2.getSelectedItem() == "I") {
                            try {
                                crearArchivo(this.gi.ejecutarOpcion("I","Dilatacion", matrizCompleta));
                                JOptionPane.showMessageDialog(null, "La imagen fue guardada con exito");
                            } catch (InterruptedException ex) {
                                Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        if (this.jComboBox2.getSelectedItem() == "Guion") {
                            try {
                                crearArchivo(this.gi.ejecutarOpcion("Guion","Dilatacion", matrizCompleta));
                                JOptionPane.showMessageDialog(null, "La imagen fue guardada con exito");
                            } catch (InterruptedException ex) {
                                Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        if (this.jComboBox2.getSelectedItem() == "X") {
                            try {
                                crearArchivo(this.gi.ejecutarOpcion("X","Dilatacion", matrizCompleta));
                                JOptionPane.showMessageDialog(null, "La imagen fue guardada con exito");
                            } catch (InterruptedException ex) {
                                Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                }
            }
            
        }
        else{
            JOptionPane.showMessageDialog(null, "Debe ingresar un metodo de resolucion para continuar","Advertencia ", JOptionPane.WARNING_MESSAGE);
        }
        }
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        if (this.jComboBox1.getSelectedItem() == "Paralelo") {
            this.jTextField1.setEditable(true);
        }
        else{
            this.jTextField1.setText("");
            this.jTextField1.setEditable(false);
        }
        
    }//GEN-LAST:event_jComboBox1ActionPerformed

   public void imprimirMatriz(int[][] matriz){
       for (int i = 0; i < matriz.length; i++) {
           for (int j = 0; j < matriz[i].length; j++) {
               System.out.print(matriz[i][j]+" ");
           }
           System.out.println(" ");
       }
       System.out.printlnv----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------v-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
   }
   

   private void crearArchivo(int[][] m){
       try {
            String ruta = "pruebaGuardado.pgm";
            File file = new File(ruta);
            // Si el archivo no existe es creado
            
            if (!file.exists()) {
                file.createNewFile();
            }
            FileWriter fw = new FileWriter(file);
            BufferedWriter bw = new BufferedWriter(fw);
            bw.write("P5");
            bw.newLine();
            bw.write("# Created by IrfanView");
            bw.newLine();
            bw.write(dimensiones[0]+" "+dimensiones[1]);
            bw.newLine();
            bw.write("255");
            bw.newLine();
            
            
            int alto = Integer.parseInt(dimensiones[1]);
            int ancho = Integer.parseInt(dimensiones[0]);
            //char[] a = new char[m[0].length*m.length];
            
            for (int i = 0; i < m.length; i++) {
                char[] a = new char[m[i].length];
                int f = 0;
                for (int j = 0; j < m[i].length; j++) {
                    //System.out.println(m[i][j]);
                    a[f] = (char) m[i][j];
                    f ++;
                }
                bw.write(String.valueOf(a));
                if (f!=m[i].length) {
                    bw.newLine();
                }
            }
            bw.close();
        } catch (Exception e) {
            e.printStackTrace();

   
   
        }
   }
   
   private boolean isNumero(String cadena) {

        boolean resultado;
        try {
            Integer.parseInt(cadena);
            resultado = true;
        } catch (NumberFormatException excepcion) {
            resultado = false;
        }
        if (resultado==true) {
            int a = Integer.parseInt(cadena);
            if (a>0 && a<= 50) {
                resultado = true;
            }
            else{
                resultado = false;
            }
        }
        

        return resultado;
    }
   
   
//   private static String concat(char... strs) {
//    CharJoiner joiner = new StringJoiner(" ");
//    for (char str : strs) {
//        joiner.add(str);
//    }
//    return joiner.toString();
//}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
