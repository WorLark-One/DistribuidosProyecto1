/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package distribuidosp1;

import ModuloDeElementosEstructurantes.ElementoEstructuranteL;
import ModuloDeElementosEstructurantes.ElementoEstructuranteX;
import ModuloDeElementosEstructurantes.GestorIterativo;
import ModuloDeElementosEstructurantes.GestorParalelo;
import java.awt.Image;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author felip
 */
public class VistaPrincipal extends javax.swing.JFrame {
    private int[][] matrizCompleta;
    private int[][] matrizCompletaAux;
    private  GestorIterativo gi;
    private  GestorParalelo gp;
    private boolean flag = false;
    
    private String minimo;
    private String dimensiones[] = new String[2];
    /**
     * Creates new form VistaPrincipal
     */
    public VistaPrincipal() {
        initComponents();
        gi = new GestorIterativo();
        gp = new GestorParalelo();
        this.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Elegir imagen");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Erosion");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Dilatacion");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Escoje un metodo de resolucion", "Secuencial", "Paralelo" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Cantidad de hilos: ");

        jTextField1.setEditable(false);

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Escoje un tipo estructural", "L invertida", "L", "I", "Guion", "X" }));

        jLabel2.setText("Opciones");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jComboBox2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        String cadenaMagica;
        String nivelGris;

        String imagen = null;
        ArrayList<String[]> s = new ArrayList<>();
        
        try {
            File abre;
            JFileChooser file = new JFileChooser();
            file.showOpenDialog(this);
            abre = file.getSelectedFile();
            BufferedReader archivo = new BufferedReader(new FileReader(abre.getAbsolutePath()));

            cadenaMagica = archivo.readLine();
            System.out.println ("Cadena Magica: "+cadenaMagica);

            String a = archivo.readLine();
            System.out.println(a);
            dimensiones = archivo.readLine().split(" ");
            System.out.println ("Ancho: "+dimensiones[0]+" Alto: "+dimensiones[1]);

            minimo = archivo.readLine();
            System.out.println("");
            imagen = "";
             
            long start = System.currentTimeMillis();
            String str = archivo.readLine();
            while(str!=null){

                imagen +=str;

                str = archivo.readLine();

            }
            long end = System.currentTimeMillis();
            long resta = end - start;
            System.out.println("Tiempo en milisegundos de la lectura de imagen: "+resta);
            this.flag =true;
        }catch(Exception exc)
        {
         System.out.println ("Error leyendo archivo");
        }
        if (flag == true) {
            int alto = Integer.parseInt(dimensiones[1]);
            int ancho = Integer.parseInt(dimensiones[0]);
            this.matrizCompleta = new int[alto][ancho];
            this.matrizCompletaAux = new int[alto][ancho];
            int nivel = 0;
            for(int i=0 ; i<alto ; i++){
                for(int j=0 ; j<ancho ; j++){
                    char a;
                    
                    a = imagen.charAt(i*ancho+j);

                    nivel = (int) a;
 
                    if(nivel>255){
                        nivel = 255;
                    }
                    this.matrizCompleta[i][j] = nivel;
                    //this.matrizCompletaAux[i][j] = nivel;
                }
            }
            //this.matrizCompleta[0][0]=this.matrizCompleta[0][1];
            this.matrizCompletaAux = new int[alto+2][ancho+2];
            int ia =0;
            for(int i=0 ; i<this.matrizCompletaAux.length; i++){
                int ja=0;
                for(int j=0 ; j<this.matrizCompletaAux[i].length; j++){
                    if (i==0) {
                        if (j==0) {
                            //esquina superior izquierda (no aumentar contadores)
                            this.matrizCompletaAux[i][j] = this.matrizCompleta[ia][ja];
                        }
                        else{
                            if (j==this.matrizCompletaAux[i].length-1) {
                                //esquina superior derecha (no aumentar contadores)
                                this.matrizCompletaAux[i][j] = this.matrizCompleta[ia][ja];
                            }
                            else{
                                //lado superior
                                this.matrizCompletaAux[i][j] = this.matrizCompleta[ia][ja];
                                if (j<this.matrizCompletaAux[i].length-2) {
                                    ja ++;
                                }
                                
                            }
                        }
                        
                    }
                    if (i==this.matrizCompletaAux.length-1) {
                        if (j==0) {
                            //esquina inferior izquierda (no aumentar contadores)
                            this.matrizCompletaAux[i][j] = this.matrizCompleta[ia][ja];
                            
                        }
                        else{
                            if (j==this.matrizCompletaAux[i].length-1) {
                                //esquina inferior derecha (no aumentar contadores)
                                this.matrizCompletaAux[i][j] = this.matrizCompleta[ia][ja];
                            }
                            else{
                                //lado inferior
                                this.matrizCompletaAux[i][j] = this.matrizCompleta[ia][ja];
                                if (j<this.matrizCompletaAux[i].length-2) {
                                    ja ++;
                                }
                            }
                        }
                    }
                    if (j==0 && i!=0 && i!=this.matrizCompletaAux.length-1) {
                        //lado izquierdo
                        this.matrizCompletaAux[i][j] = this.matrizCompleta[ia][ja];
                        
                    }
                    if (j==this.matrizCompletaAux[i].length-1 && i!=0 && i!=this.matrizCompletaAux.length-1) {
                        //lado derecho
                        this.matrizCompletaAux[i][j] = this.matrizCompleta[ia][ja];
                        
                    }
                    if (i!=0 && j!=0 && i!=this.matrizCompletaAux.length-1 && j!=this.matrizCompletaAux[i].length-1) {
                        //rellenado normal
                        this.matrizCompletaAux[i][j] = this.matrizCompleta[ia][ja];
                        if (j<this.matrizCompletaAux[i].length-2) {
                            ja ++;
                        }
                    }
                    
                }
                if (i>0 && i<this.matrizCompletaAux.length-2) { // no aumentar contador
                    ia++;
                }
            }
            JOptionPane.showMessageDialog(null, "La imagen fue guardada con exito");
        }
        else{
            
            JOptionPane.showMessageDialog(null, "Error leyendo el archivo","Advertencia ", JOptionPane.WARNING_MESSAGE);
        }

        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if (flag == false) {
            JOptionPane.showMessageDialog(null, "Debe cargar un archivo para realizar esta accion","Advertencia ", JOptionPane.WARNING_MESSAGE);
        }
        else{
        if (this.jComboBox1.getSelectedItem() != "Escoje un metodo de resolucion") {
            if (this.jComboBox1.getSelectedItem() == "Paralelo") {
                if (this.isNumero(this.jTextField1.getText())) {
                    if (this.jComboBox2.getSelectedItem() == "Escoje un tipo estructural") { 
                        JOptionPane.showMessageDialog(null, "Debe ingresar un tipo estructural","Advertencia ", JOptionPane.WARNING_MESSAGE);
                    }
                    else{
                        if (this.jComboBox2.getSelectedItem() == "L invertida" ) {
                            try {
                                crearArchivo(this.gp.ejecutarOpcion(Integer.parseInt(this.jTextField1.getText()), "InversaDeL", "Erosion", matrizCompletaAux));
                                JOptionPane.showMessageDialog(null, "La imagen fue guardada con exito");
                            } catch (InterruptedException ex) {
                                Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        if (this.jComboBox2.getSelectedItem() == "L") {
                            try {
                                long start = System.currentTimeMillis();
                                crearArchivo(this.gp.ejecutarOpcion(Integer.parseInt(this.jTextField1.getText()), "L", "Erosion", matrizCompletaAux));
                                long end = System.currentTimeMillis();
                                long resta = end - start;
                                System.out.println("Tiempo en milisegundos L en paralelo: "+resta);
                                JOptionPane.showMessageDialog(null, "La imagen fue guardada con exito");
                            } catch (InterruptedException ex) {
                                Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        if (this.jComboBox2.getSelectedItem() == "I") {
                            try {
                                crearArchivo(this.gp.ejecutarOpcion(Integer.parseInt(this.jTextField1.getText()), "I", "Erosion", matrizCompletaAux));
                                JOptionPane.showMessageDialog(null, "La imagen fue guardada con exito");
                            } catch (InterruptedException ex) {
                                Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        if (this.jComboBox2.getSelectedItem() == "Guion") {
                            try {
                                crearArchivo(this.gp.ejecutarOpcion(Integer.parseInt(this.jTextField1.getText()), "Guion", "Erosion", matrizCompletaAux));
                                JOptionPane.showMessageDialog(null, "La imagen fue guardada con exito");
                            } catch (InterruptedException ex) {
                                Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        if (this.jComboBox2.getSelectedItem() == "X") {
                            try {
                                long start = System.currentTimeMillis();
                                crearArchivo(this.gp.ejecutarOpcion(Integer.parseInt(this.jTextField1.getText()), "X", "Erosion", matrizCompletaAux));
                                long end = System.currentTimeMillis();
                                long resta = end - start;
                                System.out.println("Tiempo en milisegundos x en paralelo: "+resta);
                                JOptionPane.showMessageDialog(null, "La imagen fue guardada con exito");
                            } catch (InterruptedException ex) {
                                Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                }
                else{
                    JOptionPane.showMessageDialog(null, "Debe ingresar un numero de hilos valido","Advertencia ", JOptionPane.WARNING_MESSAGE);
                }
            }
            else{
                if (this.jComboBox1.getSelectedItem() == "Secuencial") {
                    if (this.jComboBox2.getSelectedItem() == "Escoje un tipo estructural") { 
                        JOptionPane.showMessageDialog(null, "Debe ingresar un tipo estructural","Advertencia ", JOptionPane.WARNING_MESSAGE);
                    }
                    else{
                        if (this.jComboBox2.getSelectedItem() == "L invertida" ) {
                            try {
                                crearArchivo(this.gi.ejecutarOpcion("InversaDeL","Erosion", matrizCompletaAux));
                                JOptionPane.showMessageDialog(null, "La imagen fue guardada con exito");
                            } catch (InterruptedException ex) {
                                Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        if (this.jComboBox2.getSelectedItem() == "L") {
                            try {
                                long start = System.currentTimeMillis();
                                crearArchivo(this.gi.ejecutarOpcion("L","Erosion", matrizCompletaAux));
                                long end = System.currentTimeMillis();
                                long resta = end - start;
                                System.out.println("Tiempo en milisegundos L en secuencial: "+resta);
                                JOptionPane.showMessageDialog(null, "La imagen fue guardada con exito");
                            } catch (InterruptedException ex) {
                                Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        if (this.jComboBox2.getSelectedItem() == "I") {
                            try {
                                crearArchivo(this.gi.ejecutarOpcion("I","Erosion", matrizCompletaAux));
                                JOptionPane.showMessageDialog(null, "La imagen fue guardada con exito");
                            } catch (InterruptedException ex) {
                                Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        if (this.jComboBox2.getSelectedItem() == "Guion") {
                            try {
                                crearArchivo(this.gi.ejecutarOpcion("Guion","Erosion", matrizCompletaAux));
                                JOptionPane.showMessageDialog(null, "La imagen fue guardada con exito");
                            } catch (InterruptedException ex) {
                                Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        if (this.jComboBox2.getSelectedItem() == "X") {
                            try {
                                long start = System.currentTimeMillis();
                                crearArchivo(this.gi.ejecutarOpcion("X","Erosion", matrizCompletaAux));
                                long end = System.currentTimeMillis();
                                long resta = end - start;
                                System.out.println("Tiempo en milisegundos x en secuencial: "+resta);
                                JOptionPane.showMessageDialog(null, "La imagen fue guardada con exito"); 
                            } catch (InterruptedException ex) {
                                Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                }
            }
            
        }
        else{
            JOptionPane.showMessageDialog(null, "Debe ingresar un metodo de resolucion para continuar","Advertencia ", JOptionPane.WARNING_MESSAGE);
        }
        }
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        if (flag ==false) {
            JOptionPane.showMessageDialog(null, "Debe cargar un archivo para realizar esta accion","Advertencia ", JOptionPane.WARNING_MESSAGE);
        }
        else{
        if (this.jComboBox1.getSelectedItem() != "Escoje un metodo de resolucion") {
            if (this.jComboBox1.getSelectedItem() == "Paralelo") {
                if (this.isNumero(this.jTextField1.getText())) {
                    if (this.jComboBox2.getSelectedItem() == "Escoje un tipo estructural") { 
                        JOptionPane.showMessageDialog(null, "Debe ingresar un tipo estructural","Advertencia ", JOptionPane.WARNING_MESSAGE);
                    }
                    else{
                        if (this.jComboBox2.getSelectedItem() == "L invertida" ) {
                            try {
                                crearArchivo(this.gp.ejecutarOpcion(Integer.parseInt(this.jTextField1.getText()), "InversaDeL", "Dilatacion", matrizCompletaAux));
                                JOptionPane.showMessageDialog(null, "La imagen fue guardada con exito");
                            } catch (InterruptedException ex) {
                                Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        if (this.jComboBox2.getSelectedItem() == "L") {
                            try {
                                crearArchivo(this.gp.ejecutarOpcion(Integer.parseInt(this.jTextField1.getText()), "L", "Dilatacion", matrizCompletaAux));
                                JOptionPane.showMessageDialog(null, "La imagen fue guardada con exito");
                            } catch (InterruptedException ex) {
                                Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        if (this.jComboBox2.getSelectedItem() == "I") {
                            try {
                                crearArchivo(this.gp.ejecutarOpcion(Integer.parseInt(this.jTextField1.getText()), "I", "Dilatacion", matrizCompletaAux));
                                JOptionPane.showMessageDialog(null, "La imagen fue guardada con exito");
                            } catch (InterruptedException ex) {
                                Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        if (this.jComboBox2.getSelectedItem() == "Guion") {
                            try {
                                crearArchivo(this.gp.ejecutarOpcion(Integer.parseInt(this.jTextField1.getText()), "Guion", "Dilatacion", matrizCompletaAux));
                                JOptionPane.showMessageDialog(null, "La imagen fue guardada con exito");
                            } catch (InterruptedException ex) {
                                Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        if (this.jComboBox2.getSelectedItem() == "X") {
                            try {
                                crearArchivo(this.gp.ejecutarOpcion(Integer.parseInt(this.jTextField1.getText()), "X", "Dilatacion", matrizCompletaAux));
                                JOptionPane.showMessageDialog(null, "La imagen fue guardada con exito");
                            } catch (InterruptedException ex) {
                                Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                }
                else{
                    JOptionPane.showMessageDialog(null, "Debe ingresar un numero de hilos valido","Advertencia ", JOptionPane.WARNING_MESSAGE);
                }
            }
            else{
                if (this.jComboBox1.getSelectedItem() == "Secuencial") {
                    if (this.jComboBox2.getSelectedItem() == "Escoje un tipo estructural") { 
                        JOptionPane.showMessageDialog(null, "Debe ingresar un tipo estructural","Advertencia ", JOptionPane.WARNING_MESSAGE);
                    }
                    else{
                        if (this.jComboBox2.getSelectedItem() == "L invertida" ) {
                            try {
                                crearArchivo(this.gi.ejecutarOpcion("InversaDeL","Dilatacion", matrizCompletaAux));
                                JOptionPane.showMessageDialog(null, "La imagen fue guardada con exito");
                            } catch (InterruptedException ex) {
                                Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        if (this.jComboBox2.getSelectedItem() == "L") {
                            try {
                                crearArchivo(this.gi.ejecutarOpcion("L","Dilatacion", matrizCompletaAux));
                                JOptionPane.showMessageDialog(null, "La imagen fue guardada con exito");
                            } catch (InterruptedException ex) {
                                Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        if (this.jComboBox2.getSelectedItem() == "I") {
                            try {
                                crearArchivo(this.gi.ejecutarOpcion("I","Dilatacion", matrizCompletaAux));
                                JOptionPane.showMessageDialog(null, "La imagen fue guardada con exito");
                            } catch (InterruptedException ex) {
                                Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        if (this.jComboBox2.getSelectedItem() == "Guion") {
                            try {
                                crearArchivo(this.gi.ejecutarOpcion("Guion","Dilatacion", matrizCompletaAux));
                                JOptionPane.showMessageDialog(null, "La imagen fue guardada con exito");
                            } catch (InterruptedException ex) {
                                Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        if (this.jComboBox2.getSelectedItem() == "X") {
                            try {
                                crearArchivo(this.gi.ejecutarOpcion("X","Dilatacion", matrizCompletaAux));
                                JOptionPane.showMessageDialog(null, "La imagen fue guardada con exito");
                            } catch (InterruptedException ex) {
                                Logger.getLogger(VistaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                }
            }
            
        }
        else{
            JOptionPane.showMessageDialog(null, "Debe ingresar un metodo de resolucion para continuar","Advertencia ", JOptionPane.WARNING_MESSAGE);
        }
        }
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        if (this.jComboBox1.getSelectedItem() == "Paralelo") {
            this.jTextField1.setEditable(true);
        }
        else{
            this.jTextField1.setText("");
            this.jTextField1.setEditable(false);
        }
        
    }//GEN-LAST:event_jComboBox1ActionPerformed


   private void crearArchivo(int[][] m){
       try {
            String ruta = "pruebaGuardado.pgm";
            File file = new File(ruta);
            // Si el archivo no existe es creado
            
            if (!file.exists()) {
                file.createNewFile();
            }
            FileWriter fw = new FileWriter(file);
            BufferedWriter bw = new BufferedWriter(fw);
            bw.write("P5");
            bw.newLine();
            bw.write("# Created by IrfanView");
            bw.newLine();
            bw.write(m[0].length+" "+m.length);
            bw.newLine();
            bw.write("255");
            bw.newLine();
            int alto = m.length;
            int ancho = m[0].length;
            for (int i = 0; i < m.length; i++) {
                char[] a = new char[m[i].length];
                int f = 0;
                for (int j = 0; j < m[i].length; j++) {
                    a[f] = (char) m[i][j];
                    f ++;
                }
                bw.write(String.valueOf(a));
                if (f!=m[i].length) {
                    bw.newLine();
                }
            }
            bw.close();
        } catch (Exception e) {
            e.printStackTrace();

   
   
        }
   }
   
   private boolean isNumero(String cadena) {

        boolean resultado;
        try {
            Integer.parseInt(cadena);
            resultado = true;
        } catch (NumberFormatException excepcion) {
            resultado = false;
        }
        if (resultado==true) {
            int a = Integer.parseInt(cadena);
            if (a>0 && a<= 50) {
                resultado = true;
            }
            else{
                resultado = false;
            }
        }
        

        return resultado;
    }
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
